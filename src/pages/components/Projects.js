import React, { useState, useEffect } from "react";
import { Card, Button, Modal, Badge } from "react-bootstrap";
import { FiGithub, FiExternalLink, FiFolder } from "react-icons/fi";
import styles from '../../styles/Project.module.css';

const Projects = () => {
    const [showModal, setShowModal] = useState(false);
    const [selectedProject, setSelectedProject] = useState(null);
    const [isClient, setIsClient] = useState(false);

    // Donn√©es des projets
    const projects = [
        {
            id: 1,
            title: "Gestion des emplois du temps",
            description: "Application permettant de g√©rer les emplois du temps des professeurs en prenant en compte leurs disponibilit√©s et les ressources disponibles.",
            image: "/images/imagesEDT/page_connec.png", // Ajoute une image repr√©sentative
            linkGit: "https://github.com/Logibuilder/gestionEmploiDuTemps", // Lien vers ton d√©p√¥t GitHub
            pdf: "/description/gestionEDT.pdf", // Lien vers une doc PDF si disponible
            tags: ["JAVA","Spring Boot","PostgreSQL",  "FullCalendar", "Thymeleaf", "JavaScript", "Bootstrap"],
            details: `Cette application web facilite la gestion des emplois du temps des enseignants en prenant en compte les disponibilit√©s des professeurs, les salles et les types de s√©ances (CM, TD, TP).

            Fonctionnalit√©s principales : 
            Gestion des enseignants, mati√®res et salles de cours.
            Consultation et modification des emplois du temps.
            Prise en compte des contraintes de disponibilit√©s des enseignants.
            Interface utilisateur intuitive avec FullCalendar.
            
            L‚Äôobjectif est d‚Äôaider √† organiser les plannings tout en √©vitant les conflits li√©s aux disponibilit√©s et aux ressources.`
        },
        {
            id: 2,
            title: "Portfolio",
            description: "Mon portfolio personnel o√π je pr√©sente mes projets, mes comp√©tences et o√π les utilisateurs peuvent me contacter via un formulaire de contact utilisant Formspree.",
            image: "/images/portfolio.png", // Ajoute une image de ton portfolio
            linkGit: "https://github.com/Logibuilder/assane.kane", // Lien vers ton d√©p√¥t GitHub
            pdf: "/description/portfolio.pdf", // Lien vers une doc PDF si disponible
            tags: ["React", "Formspree", "Bootstrap", "JavaScript", "HTML", "CSS"],
            details: `üöÄ Portfolio D√©veloppeur ‚Äì Assane KANE est une application web 
            dynamique d√©velopp√©e avec React, permettant de pr√©senter mon parcours, mes 
            comp√©tences et mes projets en d√©veloppement logiciel. Il int√®gre plusieurs 
            technologies telles que React pour une interface interactive, JavaScript & 
            CSS pour la gestion du comportement et du design, ainsi que Bootstrap 5 pour 
            assurer un rendu moderne et responsive. Ses principales fonctionnalit√©s 
            incluent une pr√©sentation personnelle d√©taillant mon parcours et mes objectifs, 
            un affichage de mes projets avec descriptions et liens vers GitHub, une liste 
            de mes comp√©tences en programmation et en frameworks, ainsi qu‚Äôune section 
            contact & r√©seaux avec un formulaire et des liens vers mes profils professionnels. 
            L'interface est con√ßue avec une palette de couleurs blanche et rouge, offrant un 
            design √©pur√© et professionnel. Ce projet est en constante √©volution pour int√©grer 
            de nouvelles fonctionnalit√©s et am√©liorer l'exp√©rience utilisateur. üöÄ`
        },
        {
            id: 3,
            title: "R√©seau tisseo",
            description: "L'application est une plateforme interactive permettant d'explorer le r√©seau de transport en commun de Toulouse en r√©cup√©rant et affichant en temps r√©el les donn√©es des lignes et arr√™ts via l'API Tiss√©o.",
            image: "/images/logo_tisseo.jpeg", // Chemin relatif depuis le dossier public
            linkGit: "https://github.com/votre-projet-3",
            pdf: "/description/app_tisseo.pdf", // Chemin relatif depuis le dossier public
            tags: ["React", "Mapbox", "UI/UX"],
            details: `Application Tiss√©o üöç
                    Cette application web interactive permet d‚Äôexplorer le r√©seau de transport en commun de Toulouse en r√©cup√©rant les donn√©es en temps r√©el via l‚ÄôAPI Tiss√©o.
                    Technologies utilis√©es :
                        ‚Ä¢ Svelte ‚ö° : Framework JavaScript moderne pour une interface r√©active et performante.
                        ‚Ä¢ Fetch API üåç : Communication avec l‚ÄôAPI Tiss√©o pour r√©cup√©rer les lignes et arr√™ts en temps r√©el.
                        ‚Ä¢ Bootstrap üé® : Am√©lioration de l‚Äôinterface utilisateur avec des composants et une mise en page responsive.
                    Fonctionnalit√©s principales :
                        ‚Ä¢ Affichage dynamique des lignes de transport (bus, tram, m√©tro).
                        ‚Ä¢ S√©lection d‚Äôune ligne pour afficher ses arr√™ts correspondants.
                        ‚Ä¢ Indication visuelle de la ligne s√©lectionn√©e.`
        }
    ];

    // V√©rifie si le composant est c√¥t√© client
    useEffect(() => {
        setIsClient(true);
    }, []);

    // Gestion de l'affichage du modal
    const handleShow = (project) => {
        setSelectedProject(project);
        setShowModal(true);
    };

    // Si le composant n'est pas c√¥t√© client, ne rien afficher
    if (!isClient) return null;

    return (
        <section id="project" className="container py-5">
            <h2 className="text-center mb-5 fw-bold" style={{ color: "#dc3545" }}>Mes Projets</h2>
            
            {/* Grille de projets */}
            <div className="row g-4">
                {projects.map((project) => (
                    <div key={project.id} className="col-md-6 col-lg-4">
                        <Card 
                            className={`${styles.projectCard} h-100 shadow-lg border-1 border-danger`}
                            onMouseEnter={(e) => e.currentTarget.classList.add('shadow')}
                            onMouseLeave={(e) => e.currentTarget.classList.remove('shadow')}
                        >
                            <div className={styles.cardHeader}>
                                <FiFolder className={styles.folderIcon} />
                                <div className={styles.links}>
                                    {project.linkGit && (
                                        <a href={project.linkGit} target="_blank" rel="noopener noreferrer">
                                            <FiGithub />
                                        </a>
                                    )}
                                    {project.pdf && (
                                        <Button 
                                            variant="link" 
                                            onClick={() => handleShow(project)}
                                        >
                                            <FiExternalLink />
                                        </Button>
                                    )}
                                </div>
                            </div>
                        
                            <Card.Body>
                                <h3 className="h4 mb-3">{project.title}</h3>
                                <Card.Text>{project.description}</Card.Text>
                                <div className="d-flex gap-2 flex-wrap">
                                    {project.tags.map((tag, index) => (
                                        <Badge key={index} bg="danger" pill>
                                            {tag}
                                        </Badge>
                                    ))}
                                </div>
                            </Card.Body>
                        </Card>
                    </div>
                ))}
            </div>

            {/* Modal pour les d√©tails */}
            <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
                {selectedProject && (
                    <>
                        <Modal.Header closeButton>
                            <Modal.Title>{selectedProject.title}</Modal.Title>
                        </Modal.Header>
                        <Modal.Body>
                            <img 
                                src={selectedProject.image} 
                                alt={selectedProject.title} 
                                className="img-fluid mb-4"
                                style={{ height: "300px", objectFit: "cover", width: "100%" }}
                            />
                            <p>{selectedProject.details}</p>
                            <div className="d-flex gap-2">
                                <Button 
                                    variant="danger" 
                                    href={selectedProject.link} 
                                    target="_blank"
                                >
                                    <FiGithub /> Code Source
                                </Button>
                                {selectedProject.pdf && (
                                    <Button 
                                        variant="outline-danger"
                                        href={selectedProject.pdf}
                                        target="_blank"
                                    >
                                        T√©l√©charger PDF
                                    </Button>
                                )}
                            </div>
                        </Modal.Body>
                    </>
                )}
            </Modal>
        </section>
    );
};

export default Projects;